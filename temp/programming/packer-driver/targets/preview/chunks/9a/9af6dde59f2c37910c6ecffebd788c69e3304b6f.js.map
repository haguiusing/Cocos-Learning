{"version":3,"sources":["file:///G:/CocosProjects/Cocos-Learning/assets/Scripts/Cocos%E6%A0%B8%E5%BF%83/2D%20%E5%AF%B9%E8%B1%A1/UI%E7%B3%BB%E7%BB%9F/UI%E7%BB%84%E4%BB%B6/Lesson34_Layout.ts"],"names":["_decorator","Component","Layout","Prefab","instantiate","Size","log","ccclass","property","Lesson34_Layout","type","getOrCreateLayout","lt","layout","getComponent","addComponent","createHorizontalLayout","Type","HORIZONTAL","resizeMode","ResizeMode","CONTAINER","spacingX","paddingLeft","paddingRight","horizontalDirection","HorizontalDirection","LEFT_TO_RIGHT","createVerticalLayout","VERTICAL","spacingY","paddingTop","paddingBottom","verticalDirection","VerticalDirection","TOP_TO_BOTTOM","createGridLayout","GRID","startAxis","AxisDirection","cellSize","constraint","Constraint","FIXED_COL","constraintNum","addChildAndRefresh","count","itemPrefab","i","item","name","node","addChild","updateLayout","setSpacingAndPadding","spacing","padding","onLoad","start","scheduleOnce"],"mappings":"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","sourcesContent":["// Lesson34_Layout.ts\n\nimport { _decorator, Component, Layout, Node, Prefab, instantiate, Size, log } from 'cc';\nconst { ccclass, property } = _decorator;\n\n/**\n * Lesson34_Layout\n * 演示 Cocos Creator 3.8 Layout 组件的常见 API 用法\n * 按功能划分为不同折叠块，便于查阅\n */\n@ccclass('Lesson34_Layout')\nexport class Lesson34_Layout extends Component {\n\n    /* ========================= 1. 获取/创建 Layout 组件 ========================= */\n    // #region 获取/创建 Layout\n    @property({ type: Layout })\n    layout: Layout | null = null;\n\n    /** 运行时动态创建或获取 Layout 组件 */\n    getOrCreateLayout(): Layout | null {\n        let lt = this.layout ?? this.getComponent(Layout);\n        if (!lt) {\n            lt = this.addComponent(Layout);\n            log('动态添加 Layout 组件');\n        }\n        return lt;\n    }\n    // #endregion\n\n    /* ========================= 2. 水平布局示例 ========================= */\n    // #region 水平布局\n    createHorizontalLayout() {\n        const lt = this.getOrCreateLayout();\n        if (!lt) return;\n\n        lt.type = Layout.Type.HORIZONTAL;               // 水平排列\n        lt.resizeMode = Layout.ResizeMode.CONTAINER;    // 容器自适应子节点\n        lt.spacingX = 20;                               // 水平间距\n        lt.paddingLeft = 10;\n        lt.paddingRight = 10;\n\n        // 排列方向\n        lt.horizontalDirection = Layout.HorizontalDirection.LEFT_TO_RIGHT;\n    }\n    // #endregion\n\n    /* ========================= 3. 垂直布局示例 ========================= */\n    // #region 垂直布局\n    createVerticalLayout() {\n        const lt = this.getOrCreateLayout();\n        if (!lt) return;\n\n        lt.type = Layout.Type.VERTICAL;                 // 垂直排列\n        lt.resizeMode = Layout.ResizeMode.CONTAINER;\n        lt.spacingY = 15;                               // 垂直间距\n        lt.paddingTop = 10;\n        lt.paddingBottom = 10;\n\n        // 排列方向\n        lt.verticalDirection = Layout.VerticalDirection.TOP_TO_BOTTOM;\n    }\n    // #endregion\n\n    /* ========================= 4. 网格布局示例 ========================= */\n    // #region 网格布局\n    createGridLayout() {\n        const lt = this.getOrCreateLayout();\n        if (!lt) return;\n\n        lt.type = Layout.Type.GRID;\n        lt.resizeMode = Layout.ResizeMode.CONTAINER;\n        lt.startAxis = Layout.AxisDirection.HORIZONTAL; // 先行后列\n        lt.spacingX = 20;\n        lt.spacingY = 20;\n        lt.cellSize = new Size(100, 100);               // 每个格子大小\n\n        // 约束：固定列数\n        lt.constraint = Layout.Constraint.FIXED_COL;\n        lt.constraintNum = 3;\n    }\n    // #endregion\n\n    /* ========================= 5. 动态添加子节点并立即刷新 ========================= */\n    // #region 动态添加子节点\n    @property({ type: Prefab })\n    itemPrefab: Prefab | null = null;\n\n    addChildAndRefresh(count = 5) {\n        const lt = this.getOrCreateLayout();\n        if (!lt || !this.itemPrefab) return;\n\n        for (let i = 0; i < count; ++i) {\n            const item = instantiate(this.itemPrefab);\n            item.name = `Item${i}`;\n            this.node.addChild(item);\n        }\n        // 立即更新布局，避免等待下一帧\n        lt.updateLayout(true);\n    }\n    // #endregion\n\n    /* ========================= 6. 运行时动态调整间距与边距 ========================= */\n    // #region 动态调整边距/间距\n    setSpacingAndPadding(spacing: number, padding: number) {\n        const lt = this.getOrCreateLayout();\n        if (!lt) return;\n\n        // 统一设置四个方向的内边距\n        lt.padding = padding;\n\n        // 根据布局类型设置间距\n        if (lt.type === Layout.Type.HORIZONTAL) {\n            lt.spacingX = spacing;\n        } else if (lt.type === Layout.Type.VERTICAL) {\n            lt.spacingY = spacing;\n        } else if (lt.type === Layout.Type.GRID) {\n            lt.spacingX = lt.spacingY = spacing;\n        }\n\n        lt.updateLayout(true);\n    }\n    // #endregion\n\n    /* ========================= 7. 生命周期示例 ========================= */\n    // #region 生命周期\n    onLoad() {\n        // 初始化布局\n        this.createHorizontalLayout();\n    }\n\n    start() {\n        // 演示：启动后动态添加 3 个节点\n        this.scheduleOnce(() => this.addChildAndRefresh(3), 1);\n    }\n    // #endregion\n}"]}