{"version":3,"sources":["file:///G:/CocosProjects/Cocos-Learning/assets/Scripts/Cocos%E6%A0%B8%E5%BF%83/2D%20%E5%AF%B9%E8%B1%A1/UI%E7%B3%BB%E7%BB%9F/UI%E7%BB%84%E4%BB%B6/Lesson33_Button.ts"],"names":["_decorator","Component","Button","EventHandler","Sprite","Color","SpriteFrame","log","ccclass","property","Lesson33_Button","type","getOrCreateButton","btn","getComponent","addComponent","toggleInteractable","button","interactable","scheduleOnce","setColorTransition","transition","Transition","COLOR","normalColor","WHITE","pressedColor","GRAY","hoverColor","disabledColor","duration","setSpriteTransition","SPRITE","target","node","sp","normalSprite","normalSF","pressedSprite","pressedSF","setScaleTransition","SCALE","zoomScale","addClickEventHandler","clickEvents","length","handler","component","customEventData","push","onButtonClick","event","customData","addClickListener","off","EventType","CLICK","onSimpleClick","on","name","onLoad","start"],"mappings":"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","sourcesContent":["// Lesson33_Button.ts\n\nimport { _decorator, Component, Button, EventHandler, Sprite, Color, SpriteFrame, Node, log } from 'cc';\nconst { ccclass, property } = _decorator;\n\n/**\n * Lesson33_Button\n * 演示 Cocos Creator 3.8 Button 组件的常用 API 与使用方式\n * 按功能划分为不同折叠块，便于查阅\n */\n@ccclass('Lesson33_Button')\nexport class Lesson33_Button extends Component {\n\n    /* ========================= 1. 获取 Button 组件 ========================= */\n    // #region 获取 Button 组件\n    @property({ type: Button })\n    button: Button | null = null;\n\n    /** 运行时动态获取或创建 Button 组件 */\n    getOrCreateButton(): Button | null {\n        // 方式 1：直接获取\n        let btn = this.getComponent(Button);\n        if (!btn) {\n            // 方式 2：动态添加\n            btn = this.addComponent(Button);\n            log('动态添加 Button 组件完成');\n        }\n        return btn;\n    }\n    // #endregion\n\n    /* ========================= 2. 开关按钮交互 ========================= */\n    // #region 开关按钮交互\n    toggleInteractable() {\n        const btn = this.button || this.getOrCreateButton();\n        if (!btn) return;\n\n        // 关闭交互\n        btn.interactable = false;\n        log('按钮已禁用');\n\n        // 延迟 2 秒后恢复\n        this.scheduleOnce(() => {\n            btn.interactable = true;\n            log('按钮已恢复交互');\n        }, 2);\n    }\n    // #endregion\n\n    /* ========================= 3. 设置颜色过渡 ========================= */\n    // #region 颜色过渡\n    setColorTransition() {\n        const btn = this.button || this.getOrCreateButton();\n        if (!btn) return;\n\n        // 启用 Color 过渡\n        btn.transition = Button.Transition.COLOR;\n\n        // 设置各状态颜色\n        btn.normalColor   = Color.WHITE;\n        btn.pressedColor  = Color.GRAY;\n        btn.hoverColor    = new Color(200, 200, 200);\n        btn.disabledColor = new Color(100, 100, 100, 150);\n\n        // 过渡时长\n        btn.duration = 0.15;\n    }\n    // #endregion\n\n    /* ========================= 4. 设置精灵过渡 ========================= */\n    // #region 精灵过渡\n    @property({ type: SpriteFrame })\n    normalSF: SpriteFrame | null = null;\n    @property({ type: SpriteFrame })\n    pressedSF: SpriteFrame | null = null;\n\n    setSpriteTransition() {\n        const btn = this.button || this.getOrCreateButton();\n        if (!btn) return;\n\n        btn.transition = Button.Transition.SPRITE;\n\n        // 必须指定 target（通常是背景 Sprite 节点）\n        const target = btn.target || this.node;\n        const sp = target.getComponent(Sprite);\n        if (!sp) {\n            log('请先给 target 节点添加 Sprite 组件');\n            return;\n        }\n\n        btn.normalSprite  = this.normalSF;\n        btn.pressedSprite = this.pressedSF;\n    }\n    // #endregion\n\n    /* ========================= 5. 设置缩放过渡 ========================= */\n    // #region 缩放过渡\n    setScaleTransition() {\n        const btn = this.button || this.getOrCreateButton();\n        if (!btn) return;\n\n        btn.transition = Button.Transition.SCALE;\n\n        // 点击时缩放到原始 scale * zoomScale\n        btn.zoomScale = 0.9;   // 缩小 10 %\n        btn.duration  = 0.1;   // 动画时长 0.1 秒\n    }\n    // #endregion\n\n    /* ========================= 6. 事件监听（方式 1：EventHandler） ========================= */\n    // #region 事件监听 - EventHandler\n    addClickEventHandler() {\n        const btn = this.button || this.getOrCreateButton();\n        if (!btn) return;\n\n        // 清空旧事件\n        btn.clickEvents.length = 0;\n\n        const handler = new EventHandler();\n        handler.target        = this.node;           // 事件处理脚本所在节点\n        handler.component     = 'Lesson33_Button';   // 脚本类名（需与文件名保持一致）\n        handler.handler       = 'onButtonClick';     // 回调方法\n        handler.customEventData = '自定义数据';        // 额外参数\n\n        btn.clickEvents.push(handler);\n    }\n\n    onButtonClick(event: Event, customData: string) {\n        log('按钮被点击！', customData);\n    }\n    // #endregion\n\n    /* ========================= 7. 事件监听（方式 2：node.on） ========================= */\n    // #region 事件监听 - node.on\n    addClickListener() {\n        const btn = this.button || this.getOrCreateButton();\n        if (!btn) return;\n\n        // 先移除旧监听防止重复\n        btn.node.off(Button.EventType.CLICK, this.onSimpleClick, this);\n        btn.node.on(Button.EventType.CLICK, this.onSimpleClick, this);\n    }\n\n    onSimpleClick(button: Button) {\n        log('简单监听：按钮被点击', button.name);\n    }\n    // #endregion\n\n    /* ========================= 8. 生命周期示例 ========================= */\n    // #region 生命周期\n    onLoad() {\n        // 初始化按钮\n        this.setColorTransition();\n        this.addClickEventHandler();\n        this.addClickListener();\n    }\n\n    start() {\n        // 演示：5 秒后禁用按钮\n        this.scheduleOnce(() => {\n            this.toggleInteractable();\n        }, 5);\n    }\n    // #endregion\n}"]}