{"version":3,"sources":["file:///G:/CocosProjects/Cocos-Learning/assets/Scripts/Cocos%E6%A0%B8%E5%BF%83/2D%20%E5%AF%B9%E8%B1%A1/UI%E7%B3%BB%E7%BB%9F/UI%E7%BB%84%E4%BB%B6/Lesson43_Slider.ts"],"names":["_decorator","Component","Slider","EventHandler","log","ccclass","property","Lesson43_Slider","type","getOrCreateSlider","s","slider","getComponent","addComponent","setHorizontalDirection","direction","Direction","Horizontal","setVerticalDirection","Vertical","setProgress","value","progress","Math","max","min","addSlideEvent","handler","target","node","component","slideEvents","push","onSliderValueChanged","getHandleNode","handleNode","handle","name","onLoad","start","scheduleOnce"],"mappings":";;;;;;;;;;;;;;;;AAESA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAWC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,Y,OAAAA,Y;AAAoBC,MAAAA,G,OAAAA,G;;;;;uFAF5D;;;;;OAGM;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBN,U;AAE9B;AACA;AACA;AACA;AACA;;iCAEaO,e,WADZF,OAAO,CAAC,iBAAD,C,UAKHC,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAEN;AAAR,OAAD,C,2BALb,MACaK,eADb,SACqCN,SADrC,CAC+C;AAAA;AAAA;;AAE3C;AACA;AAH2C;AAAA;;AAO3C;AACAQ,QAAAA,iBAAiB,GAAkB;AAAA;;AAC/B,cAAIC,CAAC,mBAAG,KAAKC,MAAR,2BAAkB,KAAKC,YAAL,CAAkBV,MAAlB,CAAvB;;AACA,cAAI,CAACQ,CAAL,EAAQ;AACJA,YAAAA,CAAC,GAAG,KAAKG,YAAL,CAAkBX,MAAlB,CAAJ;AACAE,YAAAA,GAAG,CAAC,gBAAD,CAAH;AACH;;AACD,iBAAOM,CAAP;AACH,SAf0C,CAgB3C;;AAEA;AACA;;;AACAI,QAAAA,sBAAsB,GAAG;AACrB,cAAMJ,CAAC,GAAG,KAAKD,iBAAL,EAAV;AACA,cAAI,CAACC,CAAL,EAAQ,OAFa,CAIrB;;AACAA,UAAAA,CAAC,CAACK,SAAF,GAAcb,MAAM,CAACc,SAAP,CAAiBC,UAA/B;AACH;;AAEDC,QAAAA,oBAAoB,GAAG;AACnB,cAAMR,CAAC,GAAG,KAAKD,iBAAL,EAAV;AACA,cAAI,CAACC,CAAL,EAAQ,OAFW,CAInB;;AACAA,UAAAA,CAAC,CAACK,SAAF,GAAcb,MAAM,CAACc,SAAP,CAAiBG,QAA/B;AACH,SAlC0C,CAmC3C;;AAEA;AACA;;;AACAC,QAAAA,WAAW,CAACC,KAAD,EAAgB;AACvB,cAAMX,CAAC,GAAG,KAAKD,iBAAL,EAAV;AACA,cAAI,CAACC,CAAL,EAAQ,OAFe,CAIvB;;AACAA,UAAAA,CAAC,CAACY,QAAF,GAAaC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYD,IAAI,CAACE,GAAL,CAAS,CAAT,EAAYJ,KAAZ,CAAZ,CAAb;AACAjB,UAAAA,GAAG,gCAAUM,CAAC,CAACY,QAAZ,CAAH;AACH,SA9C0C,CA+C3C;;AAEA;AACA;;;AACAI,QAAAA,aAAa,GAAG;AACZ,cAAMhB,CAAC,GAAG,KAAKD,iBAAL,EAAV;AACA,cAAI,CAACC,CAAL,EAAQ,OAFI,CAIZ;;AACA,cAAMiB,OAAO,GAAG,IAAIxB,YAAJ,EAAhB;AACAwB,UAAAA,OAAO,CAACC,MAAR,GAAiB,KAAKC,IAAtB;AACAF,UAAAA,OAAO,CAACG,SAAR,GAAoB,iBAApB;AACAH,UAAAA,OAAO,CAACA,OAAR,GAAkB,sBAAlB;AACAjB,UAAAA,CAAC,CAACqB,WAAF,CAAcC,IAAd,CAAmBL,OAAnB;AACH;;AAEDM,QAAAA,oBAAoB,CAACtB,MAAD,EAAiB;AACjCP,UAAAA,GAAG,4CAAYO,MAAM,CAACW,QAAnB,CAAH;AACH,SAjE0C,CAkE3C;;AAEA;AACA;;;AACAY,QAAAA,aAAa,GAAG;AACZ,cAAMxB,CAAC,GAAG,KAAKD,iBAAL,EAAV;AACA,cAAI,CAACC,CAAL,EAAQ;AAER,cAAMyB,UAAU,GAAGzB,CAAC,CAAC0B,MAAF,CAASP,IAA5B;AACAzB,UAAAA,GAAG,gCAAU+B,UAAU,CAACE,IAArB,CAAH;AACH,SA5E0C,CA6E3C;;AAEA;AACA;;;AACAC,QAAAA,MAAM,GAAG;AACL,eAAKxB,sBAAL,GADK,CAC0B;;AAC/B,eAAKM,WAAL,CAAiB,GAAjB,EAFK,CAEyB;;AAC9B,eAAKM,aAAL,GAHK,CAGyB;AACjC;;AAEDa,QAAAA,KAAK,GAAG;AACJ;AACA,eAAKC,YAAL,CAAkB,MAAM,KAAKpB,WAAL,CAAiB,CAAjB,CAAxB,EAA6C,CAA7C;AACH,SA1F0C,CA2F3C;;;AA3F2C,O;;;;;iBAKnB,I","sourcesContent":["// Lesson43_Slider.ts\n\nimport { _decorator, Component, Slider, EventHandler, Vec3, log } from 'cc';\nconst { ccclass, property } = _decorator;\n\n/**\n * Lesson43_Slider\n * 演示 Cocos Creator 3.8 Slider 组件的常见 API 用法\n * 按功能划分为不同折叠块，便于查阅\n */\n@ccclass('Lesson43_Slider')\nexport class Lesson43_Slider extends Component {\n\n    /* ========================= 1. 获取/创建 Slider 组件 ========================= */\n    // #region 获取/创建 Slider\n    @property({ type: Slider })\n    slider: Slider | null = null;\n\n    /** 运行时动态创建或获取 Slider 组件 */\n    getOrCreateSlider(): Slider | null {\n        let s = this.slider ?? this.getComponent(Slider);\n        if (!s) {\n            s = this.addComponent(Slider);\n            log('动态添加 Slider 组件');\n        }\n        return s;\n    }\n    // #endregion\n\n    /* ========================= 2. 设置滑动方向 ========================= */\n    // #region 设置滑动方向\n    setHorizontalDirection() {\n        const s = this.getOrCreateSlider();\n        if (!s) return;\n\n        // 设置为水平滑动\n        s.direction = Slider.Direction.Horizontal;\n    }\n\n    setVerticalDirection() {\n        const s = this.getOrCreateSlider();\n        if (!s) return;\n\n        // 设置为垂直滑动\n        s.direction = Slider.Direction.Vertical;\n    }\n    // #endregion\n\n    /* ========================= 3. 设置进度值 ========================= */\n    // #region 设置进度值\n    setProgress(value: number) {\n        const s = this.getOrCreateSlider();\n        if (!s) return;\n\n        // 设置进度值（0~1）\n        s.progress = Math.max(0, Math.min(1, value));\n        log(`当前进度: ${s.progress}`);\n    }\n    // #endregion\n\n    /* ========================= 4. 事件监听 ========================= */\n    // #region 事件监听\n    addSlideEvent() {\n        const s = this.getOrCreateSlider();\n        if (!s) return;\n\n        // 添加滑动事件\n        const handler = new EventHandler();\n        handler.target = this.node;\n        handler.component = 'Lesson43_Slider';\n        handler.handler = 'onSliderValueChanged';\n        s.slideEvents.push(handler);\n    }\n\n    onSliderValueChanged(slider: Slider) {\n        log(`滑块值已更改: ${slider.progress}`);\n    }\n    // #endregion\n\n    /* ========================= 5. 获取滑块节点 ========================= */\n    // #region 获取滑块节点\n    getHandleNode() {\n        const s = this.getOrCreateSlider();\n        if (!s) return;\n\n        const handleNode = s.handle.node;\n        log(`滑块节点: ${handleNode.name}`);\n    }\n    // #endregion\n\n    /* ========================= 6. 生命周期示例 ========================= */\n    // #region 生命周期\n    onLoad() {\n        this.setHorizontalDirection(); // 设置为水平滑动\n        this.setProgress(0.5);        // 设置初始进度为 50%\n        this.addSlideEvent();         // 添加滑动事件\n    }\n\n    start() {\n        // 演示：3 秒后将进度设置为 100%\n        this.scheduleOnce(() => this.setProgress(1), 3);\n    }\n    // #endregion\n}"]}