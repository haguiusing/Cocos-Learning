{"version":3,"sources":["file:///G:/CocosProjects/Cocos-Learning/assets/Scripts/Cocos%E5%9F%BA%E7%A1%80/%E8%84%9A%E6%9C%AC%E6%8C%87%E5%8D%97%E5%8F%8A%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6/%E8%84%9A%E6%9C%AC%E4%BD%BF%E7%94%A8/Lesson11_.ts"],"names":["then","arg0","Error","_decorator","Component","ccclass","property","Lesson11_","badCommonJS","goodESM","m","console","log","es6Feature","mySet","Set","add","size","showRecommended","start"],"mappings":";;;;;AAkEA,WAASA,IAAT,CAAcC,IAAd,EAAsC;AAClC,UAAM,IAAIC,KAAJ,CAAU,2BAAV,CAAN;AACH;;;;;;;AAnEQC,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;;;;;iFADrB;;;;;OAEM;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBH,U;AAE9B;AACA;AACA;AACA;AACA;AACA;;2BAEaI,S,WADZF,OAAO,CAAC,WAAD,C,gBAAR,MACaE,SADb,SAC+BH,SAD/B,CACyC;AAErC;AACA;AACQI,QAAAA,WAAW,GAAG,CAClB;AACA;AACA;AACH,SARoC,CASrC;;AAEA;AACA;;;AACQC,QAAAA,OAAO,GAAG;AACd;AACAT,UAAAA,IAAI,CAACU,CAAC,IAAIC,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BF,CAA5B,CAAN,CAAJ;AACH,SAhBoC,CAiBrC;;AAEA;AACA;;;AACQG,QAAAA,UAAU,GAAG;AACjB;AACA;AACA,cAAMC,KAAK,GAAG,IAAIC,GAAJ,EAAd;AACAD,UAAAA,KAAK,CAACE,GAAN,CAAU,SAAV;AACAL,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BE,KAAK,CAACG,IAAhC,EALiB,CAKwB;AAC5C,SA3BoC,CA4BrC;;AAEA;AACA;;;AACQC,QAAAA,eAAe,GAAG;AACtBP,UAAAA,OAAO,CAACC,GAAR;AASH,SA1CoC,CA2CrC;;AAEA;AACA;;;AACUO,QAAAA,KAAK,GAAG;AACd,eAAKV,OAAL;AACA,eAAKI,UAAL;AACA,eAAKK,eAAL;AACH,SAnDoC,CAoDrC;;;AApDqC,O","sourcesContent":["// Lesson11_.ts\nimport { _decorator, Component } from 'cc';\nconst { ccclass, property } = _decorator;\n\n/**\n * tsconfig 配置演示脚本\n * 核心类：Lesson11_\n * 说明：此脚本仅用于示范 IDE 提示与 Creator 实际行为的差异，\n *      不会真正修改 tsconfig.json。\n */\n@ccclass('Lesson11_')\nexport class Lesson11_ extends Component {\n\n    /* ------------------ 1. 禁止使用的写法（IDE 不报错，但运行时报错） ------------------ */\n    //#region 1. 错误示例：module = cjs\n    private badCommonJS() {\n        // 若 tsconfig.json 中 compilerOptions.module = \"cjs\"\n        // IDE 不报错，但 Creator 运行时会提示 “require 未定义”\n        // const myModule = require('some-module');   // ❌ 不要这样写\n    }\n    //#endregion\n\n    /* ------------------ 2. 合法的 ES 模块写法 ------------------ */\n    //#region 2. 正确示例：ES Module\n    private goodESM() {\n        // Creator 默认 module = es2015，推荐写法\n        then(m => console.log('动态 import 成功', m));\n    }\n    //#endregion\n\n    /* ------------------ 3. IDE 可能误报，但运行正确的写法 ------------------ */\n    //#region 3. IDE 误报示例：target = es5\n    private es6Feature() {\n        // 如果 tsconfig.json 中 compilerOptions.target = \"es5\"\n        // IDE 可能提示 “Set 不存在”，但 Creator 实际 target 为 es2015，运行正常\n        const mySet = new Set<string>();\n        mySet.add('Creator');\n        console.log('Set size =', mySet.size);   // ✅ 正常输出\n    }\n    //#endregion\n\n    /* ------------------ 4. 推荐的 tsconfig.json 模板 ------------------ */\n    //#region 4. 推荐 tsconfig 片段\n    private showRecommended() {\n        console.log(`推荐 tsconfig.json：\n{\n  \"extends\": \"./tmp/tsconfig.cocos.json\",\n  \"compilerOptions\": {\n    /* 自定义选项 */\n    \"noImplicitAny\": true,\n    \"strictNullChecks\": true\n  }\n}`);\n    }\n    //#endregion\n\n    /* ------------------ 5. 生命周期 ------------------ */\n    //#region 5. 生命周期\n    protected start() {\n        this.goodESM();\n        this.es6Feature();\n        this.showRecommended();\n    }\n    //#endregion\n}\n\nfunction then(arg0: (m: any) => void) {\n    throw new Error('Function not implemented.');\n}\n"]}