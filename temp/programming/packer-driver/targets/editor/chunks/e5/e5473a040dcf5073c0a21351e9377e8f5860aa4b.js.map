{"version":3,"sources":["file:///G:/CocosProjects/Cocos-Learning/assets/Scripts/Cocos%E6%A0%B8%E5%BF%83/2D%20%E5%AF%B9%E8%B1%A1/2D%20%E6%B8%B2%E6%9F%93/Lesson25_.ts"],"names":["_decorator","Component","Skeleton","resources","log","ccclass","property","Lesson25_","printJoints","skeletonAsset","joints","bindposes","invBindposes","inverseBindposes","length","forEach","path","idx","checkValid","validate","loadSkeleton","load","err","sk","refCount","manageRef","addRef","createSkeletonNode","createNode","node","setParent","name","start","onDestroy","decRef"],"mappings":"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","sourcesContent":["// Lesson25_.ts\nimport { _decorator, Component, Skeleton, resources, log } from 'cc';\nconst { ccclass, property } = _decorator;\n\n/**\n * Skeleton（骨骼资源）API 全功能演示\n * 核心类：Lesson25_\n */\n@ccclass('Lesson25_')\nexport class Lesson25_ extends Component {\n\n    /* ------------------ 1. 声明骨骼资源 ------------------ */\n    //#region 1. 声明资源\n    @property(Skeleton)\n    skeletonAsset: Skeleton = null!;\n    //#endregion\n\n    /* ------------------ 2. 访问骨骼关节信息 ------------------ */\n    //#region 2. 关节信息\n    private printJoints() {\n        if (!this.skeletonAsset) return;\n\n        const joints = this.skeletonAsset.joints;\n        const bindposes = this.skeletonAsset.bindposes;\n        const invBindposes = this.skeletonAsset.inverseBindposes;\n\n        log(`关节数量：${joints.length}`);\n        joints.forEach((path, idx) => {\n            log(`[${idx}] ${path}`);\n            log(`    bindpose: ${bindposes[idx]}`);\n            log(`    invBindpose: ${invBindposes[idx]}`);\n        });\n    }\n    //#endregion\n\n    /* ------------------ 3. 验证骨骼有效性 ------------------ */\n    //#region 3. 验证有效性\n    private checkValid() {\n        if (this.skeletonAsset && this.skeletonAsset.validate()) {\n            log('当前骨骼资源有效');\n        } else {\n            log('骨骼资源无效，缺少关节或绑定姿势数据');\n        }\n    }\n    //#endregion\n\n    /* ------------------ 4. 动态加载骨骼并获取引用 ------------------ */\n    //#region 4. 动态加载\n    private loadSkeleton(path: string) {\n        resources.load(path, Skeleton, (err, sk) => {\n            if (err) { log('加载骨骼失败:', err); return; }\n            this.skeletonAsset = sk;\n            log('骨骼加载成功，引用计数:', sk.refCount);\n            this.printJoints();\n        });\n    }\n    //#endregion\n\n    /* ------------------ 5. 增加/减少引用计数 ------------------ */\n    //#region 5. 引用管理\n    private manageRef() {\n        if (!this.skeletonAsset) return;\n        this.skeletonAsset.addRef();   // 手动增加引用\n        log('引用计数 +1:', this.skeletonAsset.refCount);\n        // 使用完成后记得 decRef()\n    }\n    //#endregion\n\n    /* ------------------ 6. 创建节点并挂载骨骼动画 ------------------ */\n    //#region 6. 创建节点\n    private createSkeletonNode() {\n        if (!this.skeletonAsset) return;\n        this.skeletonAsset.createNode((err, node) => {\n            if (err) { log('创建节点失败:', err); return; }\n            node.setParent(this.node);\n            log('已创建带骨骼动画的新节点:', node.name);\n        });\n    }\n    //#endregion\n\n    /* ------------------ 7. 生命周期 ------------------ */\n    //#region Lifecycle\n    protected start() {\n        if (this.skeletonAsset) {\n            this.printJoints();\n            this.checkValid();\n            this.manageRef();\n            this.createSkeletonNode();\n        } else {\n            // 示例：动态加载\n            this.loadSkeleton('skeletons/role');\n        }\n    }\n\n    protected onDestroy() {\n        if (this.skeletonAsset) {\n            this.skeletonAsset.decRef();\n        }\n    }\n    //#endregion\n}"]}