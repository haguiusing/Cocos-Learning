{"version":3,"sources":["file:///G:/CocosProjects/Cocos-Learning/assets/Scripts/Cocos%E6%A0%B8%E5%BF%83/2D%20%E5%AF%B9%E8%B1%A1/UI%E7%B3%BB%E7%BB%9F/UI%E7%BB%84%E4%BB%B6/Lesson35_EditBox.ts"],"names":["_decorator","Color","Component","EditBox","EventHandler","Label","log","ccclass","property","Lesson35_EditBox","type","getOrCreateEditBox","eb","editBox","getComponent","addComponent","setBasicProperties","string","placeholder","maxLength","inputMode","InputMode","SINGLE_LINE","inputFlag","InputFlag","PASSWORD","returnType","KeyboardReturnType","DONE","setLabelProperties","label","textLabel","fontSize","color","setPlaceholderProperties","placeholderLabel","addEventListeners","editboxEventHandler","target","node","component","handler","customEventData","editingDidBegan","push","editingDidEnded","textChanged","editingReturn","onEditDidBegan","editbox","onEditDidEnded","onTextChanged","text","onEditingReturn","controlFocus","focus","isFocused","blur","onLoad","start"],"mappings":"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","sourcesContent":["// Lesson35_EditBox.ts\n\nimport { _decorator, Color, Component, EditBox, EventHandler, Label, log } from 'cc';\nconst { ccclass, property } = _decorator;\n\n/**\n * Lesson35_EditBox\n * 演示 Cocos Creator 3.8 EditBox 组件的常见 API 用法\n * 按功能划分为不同折叠块，便于查阅\n */\n@ccclass('Lesson35_EditBox')\nexport class Lesson35_EditBox extends Component {\n\n    /* ========================= 1. 获取/创建 EditBox 组件 ========================= */\n    // #region 获取/创建 EditBox\n    @property({ type: EditBox })\n    editBox: EditBox | null = null;\n\n    /** 运行时动态创建或获取 EditBox 组件 */\n    getOrCreateEditBox(): EditBox | null {\n        let eb = this.editBox ?? this.getComponent(EditBox);\n        if (!eb) {\n            eb = this.addComponent(EditBox);\n            log('动态添加 EditBox 组件');\n        }\n        return eb;\n    }\n    // #endregion\n\n    /* ========================= 2. 设置基础属性 ========================= */\n    // #region 设置基础属性\n    setBasicProperties() {\n        const eb = this.getOrCreateEditBox();\n        if (!eb) return;\n\n        // 设置初始文本\n        eb.string = '初始文本';\n\n        // 设置占位符文本\n        eb.placeholder = '请输入内容...';\n\n        // 设置最大输入长度\n        eb.maxLength = 20;\n\n        // 设置输入模式（单行）\n        eb.inputMode = EditBox.InputMode.SINGLE_LINE;\n\n        // 设置输入标志位（密码模式）\n        eb.inputFlag = EditBox.InputFlag.PASSWORD;\n\n        // 设置返回键类型（仅移动端有效）\n        eb.returnType = EditBox.KeyboardReturnType.DONE;\n    }\n    // #endregion\n\n    /* ========================= 3. 设置文本显示相关 ========================= */\n    // #region 设置文本显示\n    @property({ type: Label })\n    textLabel: Label | null = null;\n\n    setLabelProperties() {\n        const eb = this.getOrCreateEditBox();\n        if (!eb) return;\n\n        // 获取文本标签组件\n        const label = this.textLabel ?? eb.textLabel;\n        if (label) {\n            label.string = '这是文本标签';\n            label.fontSize = 24;\n            label.color = new Color(255, 255, 255); // 白色\n        }\n    }\n    // #endregion\n\n    /* ========================= 4. 设置占位符相关 ========================= */\n    // #region 设置占位符\n    @property({ type: Label })\n    placeholderLabel: Label | null = null;\n\n    setPlaceholderProperties() {\n        const eb = this.getOrCreateEditBox();\n        if (!eb) return;\n\n        // 获取占位符标签组件\n        const placeholder = this.placeholderLabel ?? eb.placeholderLabel;\n        if (placeholder) {\n            placeholder.string = '占位符文本';\n            placeholder.fontSize = 20;\n            placeholder.color = new Color(150, 150, 150); // 灰色\n        }\n    }\n    // #endregion\n\n    /* ========================= 5. 事件监听 ========================= */\n    // #region 事件监听\n    addEventListeners() {\n        const editboxEventHandler = new EventHandler();\n        editboxEventHandler.target = this.node; // 这个 node 节点是你的事件处理代码组件所属的节点\n        editboxEventHandler.component = 'example';\n        editboxEventHandler.handler = 'onEditDidBegan';\n        editboxEventHandler.customEventData = 'foobar';\n\n        const eb = this.getOrCreateEditBox();\n        if (!eb) return;\n\n        eb.editingDidBegan.push(editboxEventHandler);\n        // 你也可以通过类似的方式来注册其它回调函数\n        eb.editingDidEnded.push(editboxEventHandler);\n        eb.textChanged.push(editboxEventHandler);\n        eb.editingReturn.push(editboxEventHandler);\n    }\n\n    onEditDidBegan(editbox, customEventData) {\n        // 这里 editbox 是一个 EditBox 对象\n        // 这里的 customEventData 参数就等于你之前设置的 \"foobar\"\n    }\n    // 假设这个回调是给 editingDidEnded 事件的\n    onEditDidEnded(editbox, customEventData) {\n        // 这里 editbox 是一个 EditBox 对象\n        // 这里的 customEventData 参数就等于你之前设置的 \"foobar\"\n    }\n    // 假设这个回调是给 textChanged 事件的\n    onTextChanged(text, editbox, customEventData) {\n        // 这里的 text 表示修改完后的 EditBox 的文本内容\n        // 这里 editbox 是一个 EditBox 对象\n        // 这里的 customEventData 参数就等于你之前设置的 \"foobar\"\n    }\n    // 假设这个回调是给 editingReturn 事件的\n    onEditingReturn(editbox, customEventData) {\n        // 这里 editbox 是一个 EditBox 对象\n        // 这里的 customEventData 参数就等于你之前设置的 \"foobar\"\n    }\n    // #endregion\n\n    /* ========================= 6. 焦点控制 ========================= */\n    // #region 焦点控制\n    controlFocus() {\n        const eb = this.getOrCreateEditBox();\n        if (!eb) return;\n\n        // 让 EditBox 获得焦点\n        eb.focus();\n\n        // 检查是否获得焦点\n        if (eb.isFocused()) {\n            log('EditBox 已获得焦点');\n        }\n\n        // 让 EditBox 失去焦点\n        eb.blur();\n    }\n    // #endregion\n\n    /* ========================= 7. 生命周期示例 ========================= */\n    // #region 生命周期\n    onLoad() {\n        // 初始化 EditBox 属性\n        this.setBasicProperties();\n        this.setLabelProperties();\n        this.setPlaceholderProperties();\n        this.addEventListeners();\n    }\n\n    start() {\n        // 演示：启动后自动聚焦\n        this.controlFocus();\n    }\n    // #endregion\n}"]}